services:

  db:
    container_name: postgresql_db
    image: postgres
    restart: always
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres"]
        interval: 60s
        timeout: 10s
        retries: 5
    volumes:
      - ./postgres_data:/var/lib/postgresql/data

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
    ports:
      - 5050:80
    volumes:
      - ./pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db

  etl:
    container_name: etl
    build:
      context: api/
      dockerfile: Dockerfile
    ports:
      - 3000:3000
    volumes:
      - ./api:/api
    depends_on:
      db:
        condition: service_healthy
    command: python -m api.etl.etl_process
    healthcheck:
      test: "exit 0"

  api:
    container_name: fastapi_api
    build:
      context: ./api
      dockerfile: Dockerfile
    image: myapp_api:latest # to avoid conflicts with other images
    ports:
      - 8000:8000
    volumes:
        - ./api:/api
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: "exit 0"

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: myapp_frontend:latest # to avoid conflicts with other images
    ports:
      - "8501:8501"
    volumes:
      - ./frontend:/frontend
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: "exit 0"

  ds:
    container_name: ds
    build:
      context: ./ds
      dockerfile: Dockerfile
    image: myapp_ds:latest # to avoid conflicts with other images
    ports:
      - "3030:3030"
    volumes:
      - ./ds:/ds
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_started
    healthcheck:
      test: "exit 0"

  notebook:
    build:
      context: ./notebook
      dockerfile: Dockerfile
    ports:
      - "8888:8888"
    volumes:
      - ./notebook:/notebook
    container_name: jupyter_notebook