{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SmartCRM \u2013 Documentation","text":"<p>Welcome to the official documentation for SmartCRM, a specialized analytical CRM platform tailored for restaurants and cafes. This documentation covers the system architecture, services, data models, and development workflows used to build the MVP.</p>"},{"location":"#problem","title":"\u2757 Problem","text":"<p>Small and medium-sized restaurants often lack the tools to: - Understand customer behavior and loyalty - Track product performance over time - Execute data-driven marketing campaigns - Personalize menu recommendations</p> <p>Traditional CRMs are too generic and lack the domain-specific insights needed by food and beverage businesses. This gap leads to poor customer retention, ineffective marketing, and underutilized data.</p>"},{"location":"#solution","title":"\u2705 Solution","text":"<p>SmartCRM addresses this gap with a fully integrated, microservice-based CRM that includes:</p> <ul> <li>A user-friendly Streamlit dashboard</li> <li>A FastAPI backend with structured analytics endpoints</li> <li>Automated RFM segmentation of customers</li> <li>Time-based menu item recommendations</li> <li>NFC engagement tracking</li> <li>Dockerized ETL pipeline for synthetic data generation</li> </ul> <p>All components are modular and communicate via REST APIs, making the system extendable and cloud-ready.</p>"},{"location":"#expected-outcomes","title":"\ud83c\udfaf Expected Outcomes","text":"<ul> <li>Restaurant managers gain actionable insights into sales and customer behavior</li> <li>Marketing teams can launch targeted campaigns based on customer segments</li> <li>Personalized menus improve customer satisfaction and upsell opportunities</li> <li>Full-stack data pipeline supports reproducible experiments and data science</li> </ul>"},{"location":"#whats-inside","title":"\ud83d\udce6 What's Inside","text":"<ul> <li><code>api/</code> \u2013 FastAPI backend service</li> <li><code>frontend/</code> \u2013 Streamlit-based UI</li> <li><code>etl/</code> \u2013 Data generation and loading scripts</li> <li><code>notebook/</code> \u2013 Analysis notebook for validation</li> <li><code>docs/</code> \u2013 This documentation, built with MkDocs</li> </ul> <p>Use the sidebar to explore each component in detail.</p>"},{"location":"api/","title":"API Service \u2013 SmartCRM","text":"<p>The API service is a FastAPI-based backend that serves as the central data gateway for SmartCRM. It communicates with the PostgreSQL database using SQLAlchemy ORM and provides structured endpoints for accessing transactions, menu data, RFM segments, NFC engagements, and more.</p>"},{"location":"api/#purpose","title":"\ud83d\ude80 Purpose","text":"<p>This service powers the entire analytical dashboard and customer engagement logic by: - Serving business data to the Streamlit frontend - Performing aggregations and joins on the fly - Managing entities like users, campaigns, and segments</p>"},{"location":"api/#endpoints","title":"\ud83d\udd0c Endpoints","text":"Endpoint Method Description <code>/api/transactions/</code> GET Fetch all transaction records <code>/api/fact_transaction_items/</code> GET Get item-level data for transactions <code>/api/rfm_segments/</code> GET Retrieve computed RFM segments <code>/api/rfm_segments/</code> POST Create a new RFM segment entry <code>/api/dashboard/overview</code> GET Summary metrics: sales, items sold, users <code>/api/dashboard/sales_trend</code> GET Daily trend of total sales <code>/api/dashboard/nfc_engagement</code> GET Count of NFC engagements by tag type <code>/api/campaigns/</code> GET Retrieve all campaigns <code>/api/campaigns/</code> POST Create a new campaign <code>/api/recommendations/menu</code> GET Menu recommendations based on time of day <code>/api/dim_menu_items/</code> GET Get all menu items <code>/api/dim_tables/</code> GET Get all tables <code>/api/dim_time/</code> GET Time dimension reference table <code>/api/nfc_engagements/</code> GET Get raw NFC engagement logs <code>/api/auth/login</code> POST Dummy login with static credentials"},{"location":"api/#key-components","title":"\ud83e\uddf1 Key Components","text":"File Description <code>main.py</code> Defines all FastAPI routes <code>crud.py</code> General-purpose database access functions <code>models.py</code> SQLAlchemy ORM models for all database tables <code>schemas.py</code> Pydantic validation models used in requests/responses <code>database.py</code> DB connection and session setup using SQLAlchemy <code>Dockerfile</code> Container configuration for running the API service"},{"location":"api/#example-dashboard-summary","title":"\ud83d\udee0\ufe0f Example: Dashboard Summary","text":"<p>The <code>/api/dashboard/overview</code> endpoint uses SQLAlchemy queries to calculate: - Total sales from <code>FactTransaction</code> - Total item quantity from <code>FactTransactionItem</code> - Total users from <code>DimUser</code> - Timestamp for <code>last_updated</code></p> <p>It returns a response like:</p> <p>```json {   \"total_sales\": 18567.20,   \"total_transactions\": 302,   \"total_users\": 48,   \"total_items_sold\": 954,   \"last_updated\": \"2025-05-17T14:00:00Z\" }</p>"},{"location":"app/","title":"Frontend \u2013 Streamlit App (SmartCRM)","text":"<p>The frontend of SmartCRM is built with Streamlit and serves as the main user interface for interacting with the CRM data. It allows restaurant and cafe managers to explore sales, customer behavior, NFC usage, and campaign performance\u2014all in a visual, interactive format.</p>"},{"location":"app/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Provide visual analytics and KPIs to decision-makers</li> <li>Interact with the FastAPI backend to fetch real-time business data</li> <li>Serve as the MVP interface for campaign management and menu recommendations</li> </ul>"},{"location":"app/#features","title":"\ud83d\ude80 Features","text":"Section Description Dashboard Sales overview, top items, sales trends, NFC engagement, table usage Customer Segments RFM segmentation analysis, loyalty &amp; recency visualizations Campaign Management View and track campaigns by target segment and duration Menu Recommendation Recommend food items based on time of day using backend-generated logic"},{"location":"app/#architecture","title":"\ud83d\udee0\ufe0f Architecture","text":"<ul> <li>Communicates with the FastAPI backend through <code>requests.get()</code> to <code>/api/...</code></li> <li>Merges and preprocesses the data client-side using <code>pandas</code></li> <li>Visualized using <code>altair</code> charts and interactive Streamlit components</li> <li>Session-state driven page routing via Streamlit sidebar</li> </ul>"},{"location":"app/#files","title":"\ud83d\udcc2 Files","text":"File Purpose <code>app.py</code> Main Streamlit app; handles UI logic <code>Dockerfile</code> Container for deploying the Streamlit UI <code>requirements.txt</code> Dependencies for running the app"},{"location":"app/#how-it-works","title":"\ud83e\uddea How It Works","text":"<ol> <li>On launch, the app fetches data from these endpoints:</li> <li><code>/api/dim_menu_items/</code></li> <li><code>/api/transactions/</code></li> <li><code>/api/dashboard/overview</code></li> <li><code>/api/rfm_segments/</code></li> <li> <p>etc.</p> </li> <li> <p>Merges data in memory using <code>pandas</code></p> </li> <li> <p>Renders:</p> </li> <li><code>st.metric()</code> for KPIs</li> <li><code>alt.Chart()</code> for line and bar charts</li> <li> <p><code>st.dataframe()</code> for detailed views</p> </li> <li> <p>Navigation handled by <code>st.sidebar.button()</code> \u2192 tracks <code>st.session_state[\"section\"]</code></p> </li> </ol>"},{"location":"app/#deployment-docker","title":"\ud83d\udce6 Deployment (Docker)","text":"<p>```Dockerfile FROM python:3.11-slim WORKDIR /app COPY . . RUN pip install -r requirements.txt CMD [\"streamlit\", \"run\", \"app.py\", \"--server.port=8501\", \"--server.address=0.0.0.0\"]</p> <p>--</p> <p>docker build -t smartcrm-frontend . docker run -p 8501:8501 smartcrm-frontend</p>"},{"location":"ds/","title":"Data Science &amp; Analytics \u2013 SmartCRM","text":"<p>This module contains the analytical logic behind SmartCRM's intelligence layer. It includes customer segmentation using RFM scoring and menu item recommendations based on order history and time-of-day behavior. These analytics enable targeted marketing, loyalty tracking, and dynamic personalization.</p>"},{"location":"ds/#goals","title":"\ud83c\udfaf Goals","text":"<ul> <li>Classify customers into behavioral segments using RFM (Recency, Frequency, Monetary)</li> <li>Recommend high-performing menu items per time window</li> <li>Lay the foundation for future machine learning\u2013based personalization</li> </ul>"},{"location":"ds/#code-structure","title":"\ud83d\udcc2 Code Structure","text":"File Description <code>modeling.py</code> RFM segmentation pipeline: scoring, labeling, export <code>recomendation.py</code> Popular item recommendation logic by daytime <code>main.py</code> Entrypoint for running DS workflows and writing results to database"},{"location":"ds/#rfm-segmentation","title":"\ud83e\udde9 RFM Segmentation","text":"<p>RFM analysis is a marketing technique used to rank and segment customers based on: - Recency: How long ago the customer last made a purchase - Frequency: How often they make purchases - Monetary: How much they spend in total</p>"},{"location":"ds/#steps","title":"Steps:","text":"<ol> <li>Aggregate Data:</li> <li>Group transactions by <code>mobile_id</code> (customer)</li> <li> <p>Calculate <code>recency_days</code>, <code>frequency</code>, and <code>monetary</code></p> </li> <li> <p>Score Customers:</p> </li> <li>Use quantile-based binning (1 = low, 5 = high)</li> <li> <p>Combine scores to form composite segment IDs</p> </li> <li> <p>Label Segments:</p> </li> <li>Mapping score combinations to labels like:<ul> <li>Champions</li> <li>Loyal Customers</li> <li>Need Attention</li> <li>At Risk</li> </ul> </li> </ol>"},{"location":"ds/#output-columns","title":"Output Columns:","text":"<ul> <li><code>mobile_id</code></li> <li><code>recency_days</code></li> <li><code>frequency</code></li> <li><code>monetary</code></li> <li><code>segment</code> (text label)</li> </ul> <p>These are stored in the <code>rfm_segments</code> table and made available through the API.</p>"},{"location":"ds/#menu-item-recommendation","title":"\ud83c\udf7d\ufe0f Menu Item Recommendation","text":"<p>SmartCRM recommends food and drink items to customers depending on the time of day. The system uses historical ordering behavior to suggest the most popular and relevant items.</p>"},{"location":"ds/#time-segments-dayparts","title":"Time Segments (Dayparts):","text":"ID Label Time Window 1 Early Breakfast 04:00\u201306:29 4 Lunch 12:30\u201314:29 8 Standard Dinner 19:30\u201321:29 ... (and more defined in the system)"},{"location":"ds/#logic","title":"Logic:","text":"<ol> <li>Load all historical transaction items</li> <li>For each <code>daytime_id</code>, find the top <code>N</code> items by frequency</li> <li>Store ranked list in <code>menu_recommendation</code> table</li> </ol>"},{"location":"ds/#output-columns_1","title":"Output Columns:","text":"<ul> <li><code>daytime_id</code></li> <li><code>menu_item_id</code></li> <li><code>rank</code> (1 = most recommended)</li> <li><code>created_at</code></li> </ul> <p>This data is consumed in the frontend to show personalized menu items per time slot.</p>"},{"location":"ds/#data-flow-summary","title":"\ud83d\udd04 Data Flow Summary","text":"<p>Transactions \u2192 Grouped via pandas \u2192 RFM segments \u2192 API \u2192 Grouped by daytime  \u2192 Menu rankings \u2192 API</p>"},{"location":"ds/#future-extensions","title":"\ud83d\udcc8 Future Extensions","text":"<ul> <li>Integrate user-level collaborative filtering for personalized menu recs</li> <li>Cluster customers using unsupervised models beyond RFM</li> <li>Add time-series trend analysis for menu and customer metrics</li> <li>Introduce model retraining pipelines for ongoing learning</li> </ul>"},{"location":"ds/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Data pipelines are built using pandas and SQLAlchemy</li> <li>Results are inserted into the database via ORM and served via API</li> <li>Designed to be reproducible and containerized for testing and deployment</li> </ul>"},{"location":"etl/","title":"ETL Service \u2013 SmartCRM","text":"<p>The ETL service in SmartCRM is designed to generate synthetic transactional and dimensional data for restaurants and cafes. It prepares all necessary datasets to populate the PostgreSQL database, enabling realistic dashboarding, segmentation, and recommendations.</p>"},{"location":"etl/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Simulate restaurant operations: orders, users, tables, menu items</li> <li>Preload structured data for development, testing, and demo environments</li> <li>Ensure consistency between entity relationships (e.g., transactions \u2194 items)</li> </ul>"},{"location":"etl/#files","title":"\ud83d\udcc2 Files","text":"File Description <code>etl_process.py</code> Main entry point to generate and insert data into PostgreSQL <code>data_generator.py</code> Contains Faker-powered functions to simulate each entity <code>models.py</code> Defines the SQLAlchemy ORM structure for all database tables <code>database.py</code> Manages DB session and engine creation <code>Dockerfile</code> Dockerized entry to run the ETL in an isolated environment <code>requirements.txt</code> Declares dependencies like <code>pandas</code>, <code>faker</code>, and <code>sqlalchemy</code>"},{"location":"etl/#pipeline-overview","title":"\ud83d\udd04 Pipeline Overview","text":""},{"location":"etl/#1-data-simulation-via-data_generatorpy","title":"1. Data Simulation (via <code>data_generator.py</code>)","text":"<ul> <li>Menu Items \u2013 Random dish names, prices, categories</li> <li>Tables \u2013 Unique identifiers for physical table slots</li> <li>Users \u2013 Random user IDs and metadata</li> <li>Time \u2013 Full date/time dimension with day/month/year/hour</li> <li>Transactions \u2013 Each with assigned user, table, and timestamp</li> <li>Transaction Items \u2013 Line items per transaction</li> <li>NFC Engagements \u2013 Simulated scans with tag types and timestamps</li> <li>Campaigns \u2013 Mocked marketing campaigns for testing targeting logic</li> </ul>"},{"location":"etl/#2-insertion-logic-via-etl_processpy","title":"2. Insertion Logic (via <code>etl_process.py</code>)","text":"<ul> <li>Calls generators from <code>data_generator.py</code></li> <li>Inserts records using SQLAlchemy session transactions</li> <li>Ensures primary/foreign key relationships are respected</li> <li>Creates tables via <code>Base.metadata.create_all(bind=engine)</code> if not present</li> </ul>"},{"location":"etl/#how-to-run","title":"\ud83e\uddea How to Run","text":"<p>```bash python etl_process.py</p>"},{"location":"notebook/","title":"Notebook \u2013 Result Analysis (SmartCRM)","text":"<p>This notebook (<code>result_analyses.ipynb</code>) is used for exploratory data analysis, validation of generated data, and visual summaries of customer behavior. It complements the backend analytics and serves as a lightweight environment for prototyping data science logic.</p>"},{"location":"notebook/#purpose","title":"\ud83c\udfaf Purpose","text":"<ul> <li>Validate synthetic data generated by the ETL service</li> <li>Plot and explore RFM metrics, customer activity, and ordering behavior</li> <li>Serve as a scratchpad for experimentation before productionization</li> </ul>"},{"location":"notebook/#contents-of-result_analysesipynb","title":"\ud83d\udcc2 Contents of <code>result_analyses.ipynb</code>","text":"Section Description Load Data Connect to database or load CSV/Parquet dumps Exploratory Data Analysis Plot recency, frequency, monetary histograms RFM Segments Exploration Count by segment, visualize with scatter/box plots Recommendation Stats Visualize most frequent menu items per time window Aggregated Trends Monthly sales, average check, top N items by month"},{"location":"notebook/#libraries-used","title":"\ud83e\uddf0 Libraries Used","text":"<ul> <li><code>pandas</code> \u2013 DataFrame manipulation</li> <li><code>matplotlib</code>, <code>seaborn</code> \u2013 Visualizations</li> <li><code>sqlalchemy</code> or CSV readers \u2013 For loading data</li> <li><code>jupyter</code> \u2013 Notebook interface</li> </ul>"},{"location":"notebook/#example-rfm-segment-distribution","title":"\ud83d\udcc8 Example: RFM Segment Distribution","text":"<pre><code>rfm_df[\"segment\"].value_counts().plot(kind=\"bar\", color=\"skyblue\")\nplt.title(\"Customer Segment Distribution\")\n</code></pre>"},{"location":"notebook/#typical-questions-explored","title":"\ud83e\uddea Typical Questions Explored","text":"<ul> <li>What are the average spend profiles by segment?</li> <li>Which menu items dominate specific time windows?</li> <li>Are segments consistent with business intuition?</li> </ul>"},{"location":"notebook/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>This notebook is not part of the production pipeline</li> <li>Used primarily by data scientists for analysis and visual validation</li> <li>Insights from here may be upstreamed into <code>modeling.py</code> or <code>recomendation.py</code></li> </ul>"},{"location":"notebook/#docker-optional","title":"\ud83d\udc33 Docker (Optional)","text":"<pre><code>FROM jupyter/base-notebook\nCOPY . .\nRUN pip install -r requirements.txt\n</code></pre> <p>Launch with:</p> <pre><code>docker build -t smartcrm-notebook .\ndocker run -p 8888:8888 smartcrm-notebook\n</code></pre>"}]}